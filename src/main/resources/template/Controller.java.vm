package ${package}.${moduleName}.controller;

import com.seeyon.boot.annotation.ApiMapParameter;
import com.seeyon.boot.annotation.MultiRequestBody;
import com.seeyon.boot.transport.PageInfo;
import com.seeyon.boot.transport.PageRequest;
import com.seeyon.boot.transport.PageResponse;
import com.seeyon.boot.transport.SingleRequest;
import com.seeyon.boot.transport.SingleResponse;
import com.seeyon.boot.transport.Sort;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.constraints.NotNull;
import java.util.Map;


import ${package}.${moduleName}.api.${className}AppService;
import ${package}.${moduleName}.dto.${className}Dto;



/**
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${class_name}")
@Api(tags = "${comments}访问接口")
public class ${className}Controller {

    @Autowired
    private ${className}AppService ${classname}AppService;


    @ApiOperation(value = "创建${comments}" , notes = "创建${comments}")
    @PostMapping("${class_name}/create")
    public SingleResponse<Long> create(@RequestBody ${classname}Dto dto){
        return ${classname}AppService.create(SingleRequest.from(dto));
    }


    @ApiOperation(value = "根据条件查询${comments}" , notes = "根据条件查询${comments}")
    @PostMapping("${class_name}/search")
    @ApiMapParameter(name = "params", dtoName = "${className}Dto")
    public PageResponse<${classname}Dto> search(@MultiRequestBody PageInfo pageInfo, @MultiRequestBody Map<String, Object> params, @MultiRequestBody Sort sort){
        return ${classname}AppService.selectPageByCondition(PageRequest.from(pageInfo, params, sort));
    }


    @ApiOperation(value = "获取${comments}详情")
    @GetMapping("${class_name}/{id}")
    public SingleResponse<${classname}Dto> selectById(@PathVariable("id") @ApiParam(value = "${class_name}id") Long id) {
        return ${classname}AppService.selectById(SingleRequest.from(id));
    }

    @ApiOperation(value = "根据id删除${comments}")
    @PostMapping ("${class_name}/delete")
    public SingleResponse<Integer>deleteById(@ApiParam(value = "${comments}id") @MultiRequestBody @NotNull Long id){
        return ${classname}AppService.deleteById(SingleRequest.from(id));
    }

    @ApiOperation(value = "修改${comments}" , notes = "修改${comments}")
    @PostMapping("${class_name}/update")
    public SingleResponse<Integer> update(@RequestBody ${classname}Dto dto){
        return ${classname}AppService.update(SingleRequest.from(dto));
    }




}
