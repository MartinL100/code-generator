package ${configDto.packagePath}.${configDto.module.code}.domain.service;



import ${configDto.packagePath}.${configDto.module.code}.domain.entity.${tableEntity.classNameUp};
import ${configDto.packagePath}.${configDto.module.code}.domain.dao.${tableEntity.classNameUp}Dao;
import ${configDto.packagePath}.${configDto.module.code}.dto.${tableEntity.classNameUp}Dto;

import com.seeyon.boot.transport.PageData;
import com.seeyon.boot.transport.PageInfo;
import com.seeyon.boot.transport.Sort;
import com.seeyon.boot.util.Asserts;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import javax.validation.constraints.NotNull;

/**
 * ${tableEntity.comments}
 *
#if($configDto.author != "")
 * @author ${configDto.author}
#end
 * @date ${configDto.datetime}
 */
@Service
@Slf4j
public class ${tableEntity.classNameUp}Service {

    @Autowired
    ${tableEntity.classNameUp}Dao ${tableEntity.classNameLow}Dao;

    /**
    * 创建${tableEntity.comments}
    * @param dto dto对象
    * @return id
    */
    public Long create(${tableEntity.classNameUp}Dto dto){
        ${tableEntity.classNameUp} entity = new ${tableEntity.classNameUp}();
        entity.from(dto);
        ${tableEntity.classNameLow}Dao.create(entity);
        return entity.getId();
    }

    /**
    * 根据condition查询
    * @param pageInfo 分页信息
    * @param columnMap 条件集合
    * @param sort 排序方式
    * @return ${tableEntity.comments}集合
    */
    public PageData<${tableEntity.classNameUp}Dto> selectPageByConditions(PageInfo pageInfo, Map<String, Object> columnMap, Sort sort){
        PageData<${tableEntity.classNameUp}> pageData = ${tableEntity.classNameLow}Dao.selectPageByConditions(pageInfo, columnMap, sort);
        return pageData.to(${tableEntity.classNameUp}Dto.class);
    }

    /**
    * 根据id查询
    * @param id
    * @return ${tableEntity.comments}
    */
    public ${tableEntity.classNameUp}Dto selectById(@NotNull Long id){
        ${tableEntity.classNameUp} entity = ${tableEntity.classNameLow}Dao.selectById(id);
        return null == entity?null: entity.to(${tableEntity.classNameUp}Dto.class);
    }

    /**
    * 根据id删除
    * @param id
    * @return 删除数量
    */
    public Integer deleteById(@NotNull Long id){
        return ${tableEntity.classNameLow}Dao.deleteById(id);
    }

    /**
    * 修改
    * @param dto
    * @return 修改数量
    */
    public Integer update(${tableEntity.classNameUp}Dto dto){
        ${tableEntity.classNameUp} entity = ${tableEntity.classNameLow}Dao.selectById(dto.getId());
        if (null == entity){
            return 0;
        }
        entity.from(dto);
        return ${tableEntity.classNameLow}Dao.update(entity);
    }
}

