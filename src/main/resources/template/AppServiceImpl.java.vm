package ${configDto.package}.${configDto.module.code}.appservice;

import com.seeyon.boot.annotation.AppService;
import com.seeyon.boot.transport.PageRequest;
import com.seeyon.boot.transport.PageResponse;
import com.seeyon.boot.transport.SingleRequest;
import com.seeyon.boot.transport.SingleResponse;
import com.seeyon.${configDto.module.code}.api.${tableEntity.classNameUp}AppService;
import com.seeyon.${configDto.module.code}.domain.service.${tableEntity.classNameUp}Service;
import com.seeyon.${configDto.module.code}.dto.${tableEntity.classNameUp}Dto;
import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.apache.dubbo.config.annotation.DubboService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;


/**
 * ${tableEntity.comments}
 *
#if($configDto.author != "")
 * @author ${configDto.author}
#end
 * @date ${configDto.datetime}
 */
@AppService
@Transactional
@Slf4j
@DubboService
@Api(tags = "${tableEntity.comments}对外接口")
public class ${tableEntity.classNameUp}AppServiceImpl implements ${tableEntity.classNameUp}AppService{

    @Autowired
    ${tableEntity.classNameUp}Service ${tableEntity.classNameLow}Service;

    @Override
    public SingleResponse<Long> create(SingleRequest<${tableEntity.classNameUp}Dto> request) {
        return SingleResponse.from(${tableEntity.classNameLow}Service.create(request.getData()));
    }
    @Transactional(readOnly = true)
    @Override
    public PageResponse<${tableEntity.classNameUp}Dto> selectPageByConditions(PageRequest request) {
        return PageResponse.from(${tableEntity.classNameLow}Service.selectPageByConditions(request.getPageInfo(), request.getParams(), request.getSort()));
    }
    @Transactional(readOnly = true)
    @Override
    public SingleResponse<${tableEntity.classNameUp}Dto> selectById(SingleRequest<Long> request) {
        return SingleResponse.from(${tableEntity.classNameLow}Service.selectById(request.getData()));
    }
    @Override
    public SingleResponse<Integer> deleteById(SingleRequest<Long> request) {
        return SingleResponse.from(${tableEntity.classNameLow}Service.deleteById(request.getData()));
    }

    @AppService.ValidationGroup(value = AppService.ValidationGroup.Update.class)
    @Override
    public SingleResponse<Integer> update(SingleRequest<${tableEntity.classNameUp}Dto> request) {
        return SingleResponse.from(${tableEntity.classNameLow}Service.update(request.getData()));
    }

}

