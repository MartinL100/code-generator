package ${configDto.packagePath}.${configDto.module.code}.api;

import ${configDto.packagePath}.${configDto.module.code}.dto.${tableEntity.classNameUp}Dto;
import ${configDto.packagePath}.${configDto.module.code}.domain.dao.${tableEntity.classNameUp}Dao;
import ${configDto.packagePath}.${configDto.module.code}.domain.entity.${tableEntity.classNameUp};

import com.seeyon.boot.domain.dao.Wrapper;
import com.seeyon.boot.starter.test.AppTestBase;
import com.seeyon.boot.transport.PageInfo;
import com.seeyon.boot.transport.PageRequest;
import com.seeyon.boot.transport.PageResponse;
import com.seeyon.boot.transport.SingleRequest;
import com.seeyon.boot.transport.SingleResponse;
import com.seeyon.boot.util.JsonUtils;
import com.seeyon.udc.api.AttributeAppService;
import com.seeyon.udc.common.AttributeErrorCode;
import com.seeyon.udc.dto.AttributeDto;
import com.seeyon.udc.entity.domain.dao.AttributeDao;
import com.seeyon.udc.entity.domain.entity.Attribute;

import lombok.extern.slf4j.Slf4j;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



/**
 * ${tableEntity.comments}
 *
#if($configDto.author != "")
 * @author ${configDto.author}
#end
 * @date ${configDto.datetime}
 */
@ContextConfiguration(classes = TestApplication.class)
@Slf4j
public class  ${tableEntity.classNameUp}AppServiceTest  extends AppTestBase {

    @Autowired
    private ${tableEntity.classNameUp}AppService appService;

    @Autowired
    private ${tableEntity.classNameUp}Dao ${tableEntity.classNameLow}Dao;

    /**
     * 记录用到的ID列表
     */
    private static List<Long> ${tableEntity.classNameLow}Ids = null;

    @Override
    public void init() {
        ${tableEntity.classNameLow}Ids = new ArrayList<>();

        // 预置数据
        for (int i = 0; i < 10; i++) {
            ${tableEntity.classNameUp}Dto ${tableEntity.classNameLow}Dto = new ${tableEntity.classNameUp}Dto();

            // TODO 设置属性

            SingleResponse<Long> ${tableEntity.classNameLow} = appService.create(SingleRequest.from(${tableEntity.classNameLow}Dto));

            ${tableEntity.classNameLow}Ids.add(${tableEntity.classNameLow}.getData().getContent());
        }
    }

    /**
     *  测试创建
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testCreate() {

        SingleResponse<Long> ${tableEntity.classNameLow} = createDto();

        Assert.assertTrue(${tableEntity.classNameLow}.getData().getContent() != null);

        ${tableEntity.classNameLow}Ids.add(${tableEntity.classNameLow}.getData().getContent());

    }


    private SingleResponse<Long> createDto() {
        return appService.create(SingleRequest.from(build${tableEntity.classNameUp}Dto()));
    }

    /**
     *  构建dto
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     * @return dto
     */
    private ${tableEntity.classNameUp}Dto build${tableEntity.classNameUp}Dto() {
        ${tableEntity.classNameUp}Dto ${tableEntity.classNameLow}Dto = new ${tableEntity.classNameUp}Dto();

        // TODO 设置属性

        return ${tableEntity.classNameLow}Dto;
    }
    /**
     *  测试修改
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testUpdate() {

        // 获取一条原始数据
        ${tableEntity.classNameUp}Dto ${tableEntity.classNameLow} = selectById(${tableEntity.classNameLow}Ids.get(0));

        // TODO 更新数据

        SingleResponse<Integer> updateResp = appService.update(SingleRequest.from(${tableEntity.classNameLow}));

        // 校验数据
        Assert.assertEquals(Integer.valueOf(1), updateResp.getData().getContent());
        ${tableEntity.classNameUp}Dto updated${tableEntity.classNameUp} = selectById(${tableEntity.classNameLow}.getId());

        // TODO 校验属性

    }
    /**
     *  测试删除（通过主键）
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testDeleteById() {

        int index = 5;

        Long id = ${tableEntity.classNameLow}Ids.get(index);
        SingleResponse<Integer> delResp = appService.deleteById(SingleRequest.from(id));
        Assert.assertEquals(Integer.valueOf(1), delResp.getData().getContent());

        // 被删除了，校验一下，获取时应该报错
        SingleResponse<${tableEntity.classNameUp}Dto> resp = appService.selectById(SingleRequest.from(id));

        // TODO 校验

        // 移除ID的临时缓存
        ${tableEntity.classNameLow}Ids.remove(index);

    }
    /**
     *  测试删除（不存在的数据）
        #if($configDto.author != "")
     * @author ${configDto.author}
        #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testDeleteById2() {

        // 刪除不存在的数据
        Long id = 999L;
        SingleResponse<Integer> delResp = appService.deleteById(SingleRequest.from(id));
        Assert.assertEquals(Integer.valueOf(0), delResp.getData().getContent());

    }


    /**
     *  测试查询（通过主键）
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testSelectById() {
        ${tableEntity.classNameUp}Dto ${tableEntity.classNameLow}Dto = selectById(${tableEntity.classNameLow}Ids.get(0));

        // 校验
        Assert.assertNotNull(${tableEntity.classNameLow}Dto);
    }

    /**
     *  测试查询（查询不存在的数据）
        #if($configDto.author != "")
     * @author ${configDto.author}
        #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testSelectById2() {
        Long id = 999L;
        ${tableEntity.classNameUp}Dto ${tableEntity.classNameLow}Dto = selectById(id);

        // 校验
        Assert.assertNull(${tableEntity.classNameLow}Dto);
    }

    /**
     *  测试分页查询
    #if($configDto.author != "")
     * @author ${configDto.author}
    #end
     * @date ${configDto.datetime}
     */
    @Test
    public void testSelectPageByConditions() {
        PageInfo pageInfo = new PageInfo();
        pageInfo.setPageSize(5);

        // TODO 查询条件
        Map<String, Object> map = new HashMap<>();

        PageRequest request = PageRequest.from(pageInfo, map);

        PageResponse<${tableEntity.classNameUp}Dto> selResp = appService.selectPageByConditions(request);

        Assert.assertTrue(selResp.getData().getContent() != null);

        Assert.assertTrue(selResp.getData().getContent().size() == 5);
    }

    private ${tableEntity.classNameUp}Dto selectById(Long id) {
        SingleResponse<${tableEntity.classNameUp}Dto> resp = appService.selectById(SingleRequest.from(id));
        return resp.getData().getContent();
    }

    @Override
    public void destroy() {
        Wrapper wrapper = new Wrapper(${tableEntity.classNameUp}.class);

        // TODO 删除条件

        ${tableEntity.classNameLow}Dao.deleteByWrapper(wrapper);
    }
}

